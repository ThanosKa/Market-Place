/api/products:
  post:
    summary: Create a new product
    tags:
      - Products
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - title
              - price
              - category
              - condition
            properties:
              title:
                type: string
              price:
                type: number
              category:
                type: string
                enum:
                  [
                    womenFashion,
                    travel,
                    mobile,
                    healthANDbeauty,
                    luxury,
                    homeServices,
                    menFashion,
                    furniture,
                  ]
              condition:
                type: string
                enum:
                  [brandNew, newOpenBox, refurbished, used, partsOnly, openBox]
              description:
                type: string
              images:
                type: array
                items:
                  type: string
                  format: binary
    responses:
      "201":
        $ref: "#/components/responses/ProductResponse"
      "400":
        $ref: "#/components/responses/BadRequest"
      "401":
        $ref: "#/components/responses/Unauthorized"
      "500":
        $ref: "#/components/responses/ServerError"

  get:
    summary: Get all products (unsold)
    tags:
      - Products
    parameters:
      - $ref: "#/components/parameters/ProductFilterParams"
    responses:
      "200":
        $ref: "#/components/responses/ProductsListResponse"
      "500":
        $ref: "#/components/responses/ServerError"

/api/products/user:
  get:
    summary: Get authenticated user's products (unsold)
    tags:
      - Products
    security:
      - BearerAuth: []
    parameters:
      - $ref: "#/components/parameters/ProductFilterParams"
    responses:
      "200":
        $ref: "#/components/responses/UserProductsResponse"
      "401":
        $ref: "#/components/responses/Unauthorized"
      "500":
        $ref: "#/components/responses/ServerError"

/api/products/user/sold:
  get:
    summary: Get authenticated user's sold products
    tags:
      - Products
    security:
      - BearerAuth: []
    parameters:
      - $ref: "#/components/parameters/ProductFilterParams"
    responses:
      "200":
        $ref: "#/components/responses/UserProductsResponse"
      "401":
        $ref: "#/components/responses/Unauthorized"
      "500":
        $ref: "#/components/responses/ServerError"

/api/products/user/purchased:
  get:
    summary: Get authenticated user's purchased products
    tags:
      - Products
    security:
      - BearerAuth: []
    parameters:
      - $ref: "#/components/parameters/ProductFilterParams"
    responses:
      "200":
        $ref: "#/components/responses/UserProductsResponse"
      "401":
        $ref: "#/components/responses/Unauthorized"
      "500":
        $ref: "#/components/responses/ServerError"

/api/products/user/{id}:
  get:
    summary: Get products of a specific user (unsold)
    tags:
      - Products
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/ProductFilterParams"
    responses:
      "200":
        $ref: "#/components/responses/UserProductsResponse"
      "401":
        $ref: "#/components/responses/Unauthorized"
      "500":
        $ref: "#/components/responses/ServerError"

/api/products/user/{id}/sold:
  get:
    summary: Get sold products of a specific user
    tags:
      - Products
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/ProductFilterParams"
    responses:
      "200":
        $ref: "#/components/responses/UserProductsResponse"
      "401":
        $ref: "#/components/responses/Unauthorized"
      "500":
        $ref: "#/components/responses/ServerError"

/api/products/user/{id}/purchased:
  get:
    summary: Get purchased products of a specific user
    tags:
      - Products
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - $ref: "#/components/parameters/ProductFilterParams"
    responses:
      "200":
        $ref: "#/components/responses/UserProductsResponse"
      "401":
        $ref: "#/components/responses/Unauthorized"
      "500":
        $ref: "#/components/responses/ServerError"

/api/products/{productId}:
  get:
    summary: Get a product by ID
    tags:
      - Products
    parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
    responses:
      "200":
        $ref: "#/components/responses/ProductResponse"
      "404":
        $ref: "#/components/responses/NotFound"
      "500":
        $ref: "#/components/responses/ServerError"

  put:
    summary: Update a product
    tags:
      - Products
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
    requestBody:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              title:
                type: string
              price:
                type: number
              category:
                type: string
                enum:
                  [
                    womenFashion,
                    travel,
                    mobile,
                    healthANDbeauty,
                    luxury,
                    homeServices,
                    menFashion,
                    furniture,
                  ]
              condition:
                type: string
                enum:
                  [brandNew, newOpenBox, refurbished, used, partsOnly, openBox]
              description:
                type: string
              images:
                type: array
                items:
                  type: string
                  format: binary
    responses:
      "200":
        $ref: "#/components/responses/ProductResponse"
      "400":
        $ref: "#/components/responses/BadRequest"
      "401":
        $ref: "#/components/responses/Unauthorized"
      "404":
        $ref: "#/components/responses/NotFound"
      "500":
        $ref: "#/components/responses/ServerError"

  delete:
    summary: Delete a product
    tags:
      - Products
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
    responses:
      "200":
        $ref: "#/components/responses/SuccessResponse"
      "401":
        $ref: "#/components/responses/Unauthorized"
      "404":
        $ref: "#/components/responses/NotFound"
      "500":
        $ref: "#/components/responses/ServerError"

/api/products/{productId}/purchase:
  post:
    summary: Purchase a product
    tags:
      - Products
    security:
      - BearerAuth: []
    parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
    responses:
      "200":
        $ref: "#/components/responses/ProductResponse"
      "400":
        $ref: "#/components/responses/BadRequest"
      "401":
        $ref: "#/components/responses/Unauthorized"
      "404":
        $ref: "#/components/responses/NotFound"
      "500":
        $ref: "#/components/responses/ServerError"

components:
  parameters:
    ProductFilterParams:
      - in: query
        name: search
        schema:
          type: string
      - in: query
        name: category
        schema:
          type: array
          items:
            type: string
            enum:
              [
                womenFashion,
                travel,
                mobile,
                healthANDbeauty,
                luxury,
                homeServices,
                menFashion,
                furniture,
              ]
        style: form
        explode: false
      - in: query
        name: condition
        schema:
          type: string
          enum: [brandNew, newOpenBox, refurbished, used, partsOnly, openBox]
      - in: query
        name: minPrice
        schema:
          type: number
      - in: query
        name: maxPrice
        schema:
          type: number
      - in: query
        name: sort
        schema:
          type: string
        default: createdAt
      - in: query
        name: order
        schema:
          type: string
        enum: [asc, desc]
        default: desc
      - in: query
        name: page
        schema:
          type: integer
        default: 1
      - in: query
        name: limit
        schema:
          type: integer
        default: 10

  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        price:
          type: number
        images:
          type: array
          items:
            type: string
        category:
          type: string
          enum:
            [
              womenFashion,
              travel,
              mobile,
              healthANDbeauty,
              luxury,
              homeServices,
              menFashion,
              furniture,
            ]
        condition:
          type: string
          enum: [brandNew, newOpenBox, refurbished, used, partsOnly, openBox]
        description:
          type: string
        seller:
          $ref: "#/components/schemas/User"
        sold:
          type: object
          properties:
            to:
              $ref: "#/components/schemas/User"
            date:
              type: string
              format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    User:
      type: object
      properties:
        _id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        profilePicture:
          type: string

  responses:
    ProductResponse:
      description: Successful response with product data
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: number
                enum: [1]
              message:
                type: string
              data:
                type: object
                properties:
                  product:
                    $ref: "#/components/schemas/Product"

    ProductsListResponse:
      description: Successful response with list of products
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: number
                enum: [1]
              message:
                type: string
              data:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  total:
                    type: number
                  page:
                    type: number
                  limit:
                    type: number
                  sort:
                    type: string
                  order:
                    type: string

    UserProductsResponse:
      description: Successful response with user's products
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: number
                enum: [1]
              message:
                type: string
              data:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  page:
                    type: number
                  limit:
                    type: number
                  total:
                    type: number
                  totalPages:
                    type: number
                  sort:
                    type: string
                  order:
                    type: string

    SuccessResponse:
      description: Generic success response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: number
                enum: [1]
              message:
                type: string
              data:
                type: null

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: number
                enum: [0]
              message:
                type: string
              data:
                type: null

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: number
                enum: [0]
              message:
                type: string
              data:
                type: null

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: number
                enum: [0]
              message:
                type: string
              data:
                type: null

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: number
                enum: [0]
              message:
                type: string
              data:
                type: null

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
